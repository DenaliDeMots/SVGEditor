var _user$project$Main$symbols = _user$project$Tool_Render$symbols;
var _user$project$Main$view = function (model) {
	var wWidth = model.windowSize.width;
	var wHeight = model.windowSize.height;
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width(
				_elm_lang$core$Basics$toString(wWidth)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height(
					_elm_lang$core$Basics$toString(wHeight)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'0 0 ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(wWidth),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(wHeight))))),
					_1: {
						ctor: '::',
						_0: _user$project$Events$mouseUpWithClickTarget(_user$project$Messages_ClickTarget$Screen),
						_1: {
							ctor: '::',
							_0: _user$project$Events$mouseDownWithClickTarget(_user$project$Messages_ClickTarget$Screen),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Main$symbols,
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A5(_user$project$Tool_Render$toolPallet, 50, 50, 80, 160, model.activeTool),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					function (graphic) {
						return A2(
							_user$project$Graphic$toSvg,
							{
								ctor: '::',
								_0: _user$project$Events$mouseDownWithClickTarget(
									_user$project$Messages_ClickTarget$Graphic(graphic)),
								_1: {
									ctor: '::',
									_0: _user$project$Events$mouseUpWithClickTarget(
										_user$project$Messages_ClickTarget$Graphic(graphic)),
									_1: {ctor: '[]'}
								}
							},
							graphic);
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						model.graphics,
						_user$project$Utilities$maybeToList(model.previewGraphic))))));
};
var _user$project$Main$trackPosition = F2(
	function (cursor, tagger) {
		var _p0 = cursor;
		if (_p0.ctor === 'NotTracking') {
			return _elm_lang$core$Platform_Sub$none;
		} else {
			return _elm_lang$mouse$Mouse$moves(tagger);
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_user$project$Messages$Resize),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$downs(
					_user$project$Messages$MouseDown(_user$project$Messages_ClickTarget$Screen)),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(
						_user$project$Messages$MouseUp(_user$project$Messages_ClickTarget$Screen)),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Main$trackPosition, model.cursorPosition, _user$project$Messages$MouseMove),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$createElipse = F3(
	function (startPosition, currentPosition, model) {
		var commonAttributes = {stroke: 'none', fill: '#666', strokeWidth: '0'};
		var yRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.y - currentPosition.y)));
		var xRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.x - currentPosition.x)));
		var elipseAttributes = {
			rx: xRadius,
			ry: yRadius,
			cx: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.x, currentPosition.x)) - xRadius,
			cy: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.y, currentPosition.y)) - yRadius
		};
		return (_elm_lang$core$Native_Utils.eq(elipseAttributes.rx, 0) || _elm_lang$core$Native_Utils.eq(elipseAttributes.ry, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createElipse, elipseAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$createRectangle = F3(
	function (start, end, model) {
		var commonAttributes = {stroke: 'none', fill: '#666', strokeWidth: '0'};
		var recAttributes = {
			x: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.x, end.x)),
			y: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.y, end.y)),
			width: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.x - end.x)),
			height: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.y - end.y)),
			rx: 0,
			ry: 0
		};
		return (_elm_lang$core$Native_Utils.eq(recAttributes.height, 0) || _elm_lang$core$Native_Utils.eq(recAttributes.width, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createRectangle, recAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$updatePreviewGraphic = F3(
	function (drawAction, currentPosition, model) {
		var _p1 = drawAction;
		if (_p1.ctor === 'DrawRect') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					previewGraphic: _elm_lang$core$List$head(
						A3(_user$project$Main$createRectangle, _p1._0, currentPosition, model))
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					previewGraphic: _elm_lang$core$List$head(
						A3(_user$project$Main$createElipse, _p1._0, currentPosition, model))
				});
		}
	});
var _user$project$Main$setWindowSize = F2(
	function (model, size) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{windowSize: size});
	});
var _user$project$Main$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {windowSize: a, cursorPosition: b, mouseDown: c, currentAction: d, activeTool: e, graphics: f, previewGraphic: g};
	});
var _user$project$Main$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$Pos = function (a) {
	return {ctor: 'Pos', _0: a};
};
var _user$project$Main$NotTracking = {ctor: 'NotTracking'};
var _user$project$Main$mouseMoveEvent = F2(
	function (model, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{
				cursorPosition: _elm_lang$core$Native_Utils.eq(model.cursorPosition, _user$project$Main$NotTracking) ? _user$project$Main$NotTracking : _user$project$Main$Pos(position)
			});
		var _p2 = model2.currentAction;
		if (_p2.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: model2,
				_1: {ctor: '[]'}
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A3(_user$project$Main$updatePreviewGraphic, _p2._0, position, model2),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Main$Draw = function (a) {
	return {ctor: 'Draw', _0: a};
};
var _user$project$Main$None = {ctor: 'None'};
var _user$project$Main$initialModel = {
	windowSize: {width: 0, height: 0},
	cursorPosition: _user$project$Main$NotTracking,
	mouseDown: false,
	currentAction: _user$project$Main$None,
	activeTool: _user$project$Tool$DrawRectangle,
	graphics: {ctor: '[]'},
	previewGraphic: _elm_lang$core$Maybe$Nothing
};
var _user$project$Main$init = function (size) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		A2(_user$project$Main$setWindowSize, _user$project$Main$initialModel, size),
		{ctor: '[]'});
};
var _user$project$Main$mouseUpEvent = F3(
	function (model, clickTarget, position) {
		var _p3 = model.currentAction;
		if (_p3.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{cursorPosition: _user$project$Main$NotTracking}),
				_1: {ctor: '[]'}
			};
		} else {
			var _p4 = _p3._0;
			if (_p4.ctor === 'DrawRect') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentAction: _user$project$Main$None,
							cursorPosition: _user$project$Main$NotTracking,
							graphics: A2(
								_elm_lang$core$Basics_ops['++'],
								model.graphics,
								_user$project$Utilities$maybeToList(model.previewGraphic)),
							previewGraphic: _elm_lang$core$Maybe$Nothing
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentAction: _user$project$Main$None,
							cursorPosition: _user$project$Main$NotTracking,
							graphics: A2(
								_elm_lang$core$Basics_ops['++'],
								model.graphics,
								_user$project$Utilities$maybeToList(model.previewGraphic)),
							previewGraphic: _elm_lang$core$Maybe$Nothing
						}),
					_1: {ctor: '[]'}
				};
			}
		}
	});
var _user$project$Main$DrawElipse = function (a) {
	return {ctor: 'DrawElipse', _0: a};
};
var _user$project$Main$DrawRect = function (a) {
	return {ctor: 'DrawRect', _0: a};
};
var _user$project$Main$mouseDownEvent = F3(
	function (model, clickTarget, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{mouseDown: true});
		var _p5 = clickTarget;
		if (_p5.ctor === 'ToolPallet') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model2,
					{currentAction: _user$project$Main$None, activeTool: _p5._0, cursorPosition: _user$project$Main$NotTracking}),
				_1: {ctor: '[]'}
			};
		} else {
			var _p6 = model.activeTool;
			switch (_p6.ctor) {
				case 'Select':
					var _p7 = clickTarget;
					switch (_p7.ctor) {
						case 'Screen':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model2,
									{cursorPosition: _user$project$Main$NotTracking, currentAction: _user$project$Main$None}),
								_1: {ctor: '[]'}
							};
						case 'Graphic':
							return _elm_lang$core$Native_Utils.crashCase(
								'Main',
								{
									start: {line: 163, column: 25},
									end: {line: 176, column: 88}
								},
								_p7)('TODO - Selected a Graphic for editing');
						default:
							return A2(
								_elm_lang$core$Debug$log,
								'Evaluated unreachable branch',
								{
									ctor: '_Tuple2',
									_0: model2,
									_1: {ctor: '[]'}
								});
					}
				case 'DrawRectangle':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model2,
							{
								cursorPosition: _user$project$Main$Pos(position),
								currentAction: _user$project$Main$Draw(
									_user$project$Main$DrawRect(position))
							}),
						_1: {ctor: '[]'}
					};
				case 'DrawElipse':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model2,
							{
								cursorPosition: _user$project$Main$Pos(position),
								currentAction: _user$project$Main$Draw(
									_user$project$Main$DrawElipse(position))
							}),
						_1: {ctor: '[]'}
					};
				default:
					return _elm_lang$core$Native_Utils.crashCase(
						'Main',
						{
							start: {line: 161, column: 17},
							end: {line: 195, column: 64}
						},
						_p6)('TODO - Moving Tool Pallet');
			}
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p10 = msg;
		switch (_p10.ctor) {
			case 'Resize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{windowSize: _p10._0}),
					{ctor: '[]'});
			case 'MouseDown':
				var _p11 = A3(_user$project$Main$mouseDownEvent, model, _p10._0, _p10._1);
				var modelUpdates = _p11._0;
				var commands = _p11._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: true, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, activeTool: modelUpdates.activeTool}),
					commands);
			case 'MouseUp':
				var _p12 = A3(_user$project$Main$mouseUpEvent, model, _p10._0, _p10._1);
				var modelUpdates = _p12._0;
				var commands = _p12._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: false, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, graphics: modelUpdates.graphics}),
					commands);
			default:
				var _p13 = A2(_user$project$Main$mouseMoveEvent, model, _p10._0);
				var modelUpdates = _p13._0;
				var commands = _p13._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{cursorPosition: modelUpdates.cursorPosition, previewGraphic: modelUpdates.previewGraphic}),
					commands);
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (height) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (width) {
					return _elm_lang$core$Json_Decode$succeed(
						{height: height, width: width});
				},
				A2(_elm_lang$core$Json_Decode$field, 'width', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$int)));

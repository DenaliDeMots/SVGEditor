var _user$project$Main$symbols = _user$project$Tool_Render$symbols;
var _user$project$Main$view = function (model) {
	var wWidth = model.windowSize.width;
	var wHeight = model.windowSize.height;
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width(
				_elm_lang$core$Basics$toString(wWidth)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height(
					_elm_lang$core$Basics$toString(wHeight)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'0 0 ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(wWidth),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(wHeight))))),
					_1: {
						ctor: '::',
						_0: _user$project$Events$mouseUpWithClickTarget(_user$project$Messages_ClickTarget$Screen),
						_1: {
							ctor: '::',
							_0: _user$project$Events$mouseDownWithClickTarget(_user$project$Messages_ClickTarget$Screen),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Main$symbols,
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A4(_user$project$Properties_Render$propertiesPallet, 400, 50, 170, model.propertyPalletState),
					_1: {ctor: '[]'}
				},
				A3(
					_elm_lang$core$Basics$flip,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					{
						ctor: '::',
						_0: A4(_user$project$Tool_Render$toolPallet, 50, 50, 190, model.activeTool),
						_1: {ctor: '[]'}
					},
					A2(
						_elm_lang$core$List$map,
						function (graphic) {
							return A2(
								_user$project$Graphic$toSvg,
								{
									ctor: '::',
									_0: _user$project$Events$mouseDownWithClickTarget(
										_user$project$Messages_ClickTarget$Graphic(graphic)),
									_1: {
										ctor: '::',
										_0: _user$project$Events$mouseUpWithClickTarget(
											_user$project$Messages_ClickTarget$Graphic(graphic)),
										_1: {ctor: '[]'}
									}
								},
								graphic);
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							model.graphics,
							_user$project$Utilities$maybeToList(model.previewGraphic)))))));
};
var _user$project$Main$trackPosition = F2(
	function (cursor, tagger) {
		var _p0 = cursor;
		if (_p0.ctor === 'NotTracking') {
			return _elm_lang$core$Platform_Sub$none;
		} else {
			return _elm_lang$mouse$Mouse$moves(tagger);
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_user$project$Messages$Resize),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$downs(
					_user$project$Messages$MouseDown(_user$project$Messages_ClickTarget$Screen)),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(
						_user$project$Messages$MouseUp(_user$project$Messages_ClickTarget$Screen)),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Main$trackPosition, model.cursorPosition, _user$project$Messages$MouseMove),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$createPolygon = F3(
	function (startPoint, polyList, model) {
		var commonAttributes = {
			stroke: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.strokeColor),
			fill: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.fillColor),
			strokeWidth: _elm_lang$core$Basics$toString(model.propertyPalletState.strokeWidth)
		};
		return {
			ctor: '::',
			_0: A3(_user$project$Graphic$createPolygon, startPoint, polyList, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$createElipse = F3(
	function (startPosition, currentPosition, model) {
		var commonAttributes = {
			stroke: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.strokeColor),
			fill: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.fillColor),
			strokeWidth: _elm_lang$core$Basics$toString(model.propertyPalletState.strokeWidth)
		};
		var yRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.y - currentPosition.y)));
		var xRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.x - currentPosition.x)));
		var elipseAttributes = {
			rx: xRadius,
			ry: yRadius,
			cx: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.x, currentPosition.x)) - xRadius,
			cy: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.y, currentPosition.y)) - yRadius
		};
		return (_elm_lang$core$Native_Utils.eq(elipseAttributes.rx, 0) || _elm_lang$core$Native_Utils.eq(elipseAttributes.ry, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createElipse, elipseAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$createRectangle = F3(
	function (start, end, model) {
		var commonAttributes = {
			stroke: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.strokeColor),
			fill: _eskimoblood$elm_color_extra$Color_Convert$colorToHex(model.propertyPalletState.fillColor),
			strokeWidth: _elm_lang$core$Basics$toString(model.propertyPalletState.strokeWidth)
		};
		var recAttributes = {
			x: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.x, end.x)),
			y: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.y, end.y)),
			width: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.x - end.x)),
			height: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.y - end.y)),
			rx: 0,
			ry: 0
		};
		return (_elm_lang$core$Native_Utils.eq(recAttributes.height, 0) || _elm_lang$core$Native_Utils.eq(recAttributes.width, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createRectangle, recAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$updatePreviewGraphic = F3(
	function (drawAction, currentPosition, model) {
		var _p1 = drawAction;
		switch (_p1.ctor) {
			case 'DrawRect':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						previewGraphic: _elm_lang$core$List$head(
							A3(_user$project$Main$createRectangle, _p1._0, currentPosition, model))
					});
			case 'DrawElipse':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						previewGraphic: _elm_lang$core$List$head(
							A3(_user$project$Main$createElipse, _p1._0, currentPosition, model))
					});
			default:
				var _p3 = _p1._0;
				var _p2 = _p1._1;
				var floatPosition = _user$project$Utilities$intPositionToFloat(currentPosition);
				var snapToStart = (_elm_lang$core$Native_Utils.cmp(
					A2(_user$project$Utilities$distance, _p3, floatPosition),
					_user$project$Graphic$polygonSnapDistance) < 1) && (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(_p2),
					2) > -1);
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						previewGraphic: _elm_lang$core$List$head(
							A3(
								_user$project$Main$createPolygon,
								_p3,
								snapToStart ? _p2 : {ctor: '::', _0: floatPosition, _1: _p2},
								model))
					});
		}
	});
var _user$project$Main$initialPropertyPalletState = {fillColor: _elm_lang$core$Color$green, strokeColor: _elm_lang$core$Color$blue, strokeWidth: 4};
var _user$project$Main$setWindowSize = F2(
	function (model, size) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{windowSize: size});
	});
var _user$project$Main$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {windowSize: a, cursorPosition: b, mouseDown: c, currentAction: d, activeTool: e, propertyPalletState: f, graphics: g, previewGraphic: h};
	});
var _user$project$Main$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$Pos = function (a) {
	return {ctor: 'Pos', _0: a};
};
var _user$project$Main$NotTracking = {ctor: 'NotTracking'};
var _user$project$Main$mouseMoveEvent = F2(
	function (model, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{
				cursorPosition: _elm_lang$core$Native_Utils.eq(model.cursorPosition, _user$project$Main$NotTracking) ? _user$project$Main$NotTracking : _user$project$Main$Pos(position)
			});
		var _p4 = model2.currentAction;
		if (_p4.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: model2,
				_1: {ctor: '[]'}
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A3(_user$project$Main$updatePreviewGraphic, _p4._0, position, model2),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Main$Draw = function (a) {
	return {ctor: 'Draw', _0: a};
};
var _user$project$Main$None = {ctor: 'None'};
var _user$project$Main$initialModel = {
	windowSize: {width: 0, height: 0},
	cursorPosition: _user$project$Main$NotTracking,
	mouseDown: false,
	currentAction: _user$project$Main$None,
	activeTool: _user$project$Tool$DrawRectangle,
	propertyPalletState: _user$project$Main$initialPropertyPalletState,
	graphics: {ctor: '[]'},
	previewGraphic: _elm_lang$core$Maybe$Nothing
};
var _user$project$Main$init = function (size) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		A2(_user$project$Main$setWindowSize, _user$project$Main$initialModel, size),
		{ctor: '[]'});
};
var _user$project$Main$DrawPolygon = F2(
	function (a, b) {
		return {ctor: 'DrawPolygon', _0: a, _1: b};
	});
var _user$project$Main$mouseUpEvent = F3(
	function (model, clickTarget, position) {
		var _p5 = model.currentAction;
		if (_p5.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{cursorPosition: _user$project$Main$NotTracking}),
				_1: {ctor: '[]'}
			};
		} else {
			var _p6 = _p5._0;
			switch (_p6.ctor) {
				case 'DrawRect':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentAction: _user$project$Main$None,
								cursorPosition: _user$project$Main$NotTracking,
								graphics: A2(
									_elm_lang$core$Basics_ops['++'],
									model.graphics,
									_user$project$Utilities$maybeToList(model.previewGraphic)),
								previewGraphic: _elm_lang$core$Maybe$Nothing
							}),
						_1: {ctor: '[]'}
					};
				case 'DrawElipse':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentAction: _user$project$Main$None,
								cursorPosition: _user$project$Main$NotTracking,
								graphics: A2(
									_elm_lang$core$Basics_ops['++'],
									model.graphics,
									_user$project$Utilities$maybeToList(model.previewGraphic)),
								previewGraphic: _elm_lang$core$Maybe$Nothing
							}),
						_1: {ctor: '[]'}
					};
				default:
					var _p8 = _p6._0;
					var _p7 = _p6._1;
					var numberOfPoints = _elm_lang$core$List$length(_p7);
					var floatPosition = _user$project$Utilities$intPositionToFloat(position);
					var distanceFromStartPoint = A2(_user$project$Utilities$distance, _p8, floatPosition);
					var completedPolygon = (_elm_lang$core$Native_Utils.cmp(numberOfPoints, 2) > -1) && (_elm_lang$core$Native_Utils.cmp(distanceFromStartPoint, _user$project$Graphic$polygonSnapDistance) < 1);
					var firstPoint = _elm_lang$core$Native_Utils.eq(floatPosition, _p8) && _elm_lang$core$Native_Utils.eq(
						_p7,
						{ctor: '[]'});
					return completedPolygon ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentAction: _user$project$Main$None,
								cursorPosition: _user$project$Main$NotTracking,
								graphics: A2(
									_elm_lang$core$Basics_ops['++'],
									model.graphics,
									A3(_user$project$Main$createPolygon, _p8, _p7, model)),
								previewGraphic: _elm_lang$core$Maybe$Nothing
							}),
						_1: {ctor: '[]'}
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								currentAction: _user$project$Main$Draw(
									A2(
										_user$project$Main$DrawPolygon,
										_p8,
										firstPoint ? _p7 : {ctor: '::', _0: floatPosition, _1: _p7}))
							}),
						_1: {ctor: '[]'}
					};
			}
		}
	});
var _user$project$Main$DrawElipse = function (a) {
	return {ctor: 'DrawElipse', _0: a};
};
var _user$project$Main$DrawRect = function (a) {
	return {ctor: 'DrawRect', _0: a};
};
var _user$project$Main$mouseDownEvent = F3(
	function (model, clickTarget, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{mouseDown: true});
		var _p9 = clickTarget;
		switch (_p9.ctor) {
			case 'ToolPallet':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model2,
						{currentAction: _user$project$Main$None, activeTool: _p9._0, cursorPosition: _user$project$Main$NotTracking}),
					_1: {ctor: '[]'}
				};
			case 'ToolPalletHandle':
				return _elm_lang$core$Native_Utils.crashCase(
					'Main',
					{
						start: {line: 184, column: 9},
						end: {line: 247, column: 30}
					},
					_p9)('TODO implement tool pallet dragging');
			default:
				var _p11 = model.activeTool;
				switch (_p11.ctor) {
					case 'Select':
						var _p12 = clickTarget;
						switch (_p12.ctor) {
							case 'Screen':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model2,
										{cursorPosition: _user$project$Main$NotTracking, currentAction: _user$project$Main$None}),
									_1: {ctor: '[]'}
								};
							case 'Graphic':
								return _elm_lang$core$Native_Utils.crashCase(
									'Main',
									{
										start: {line: 200, column: 25},
										end: {line: 213, column: 88}
									},
									_p12)('TODO - Selected a Graphic for editing');
							default:
								return A2(
									_elm_lang$core$Debug$log,
									'Evaluated unreachable branch',
									{
										ctor: '_Tuple2',
										_0: model2,
										_1: {ctor: '[]'}
									});
						}
					case 'DrawRectangle':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model2,
								{
									cursorPosition: _user$project$Main$Pos(position),
									currentAction: _user$project$Main$Draw(
										_user$project$Main$DrawRect(position))
								}),
							_1: {ctor: '[]'}
						};
					case 'DrawElipse':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model2,
								{
									cursorPosition: _user$project$Main$Pos(position),
									currentAction: _user$project$Main$Draw(
										_user$project$Main$DrawElipse(position))
								}),
							_1: {ctor: '[]'}
						};
					default:
						var _p14 = function () {
							var _p15 = model2.currentAction;
							if ((_p15.ctor === 'Draw') && (_p15._0.ctor === 'DrawPolygon')) {
								return {ctor: '_Tuple2', _0: _p15._0._0, _1: _p15._0._1};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _user$project$Utilities$intPositionToFloat(position),
									_1: {ctor: '[]'}
								};
							}
						}();
						var startPoint = _p14._0;
						var posList = _p14._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model2,
								{
									cursorPosition: _user$project$Main$Pos(position),
									currentAction: _user$project$Main$Draw(
										A2(_user$project$Main$DrawPolygon, startPoint, posList)),
									previewGraphic: _elm_lang$core$List$head(
										A3(_user$project$Main$createPolygon, startPoint, posList, model))
								}),
							_1: {ctor: '[]'}
						};
				}
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p16 = msg;
		switch (_p16.ctor) {
			case 'Resize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{windowSize: _p16._0}),
					{ctor: '[]'});
			case 'UpdatePropertyPalletState':
				var nextModel = function (state) {
					return _elm_lang$core$Native_Utils.update(
						model,
						{propertyPalletState: state});
				};
				var palletState = model.propertyPalletState;
				var _p17 = _p16._0;
				switch (_p17.ctor) {
					case 'FillColor':
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							nextModel(
								_elm_lang$core$Native_Utils.update(
									palletState,
									{fillColor: _p17._0})),
							{
								ctor: '::',
								_0: _elm_lang$core$Platform_Cmd$none,
								_1: {ctor: '[]'}
							});
					case 'StrokeColor':
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							nextModel(
								_elm_lang$core$Native_Utils.update(
									palletState,
									{strokeColor: _p17._0})),
							{
								ctor: '::',
								_0: _elm_lang$core$Platform_Cmd$none,
								_1: {ctor: '[]'}
							});
					default:
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							nextModel(
								_elm_lang$core$Native_Utils.update(
									palletState,
									{
										strokeWidth: A2(_elm_lang$core$Result$withDefault, palletState.strokeWidth, _p17._0)
									})),
							{
								ctor: '::',
								_0: _elm_lang$core$Platform_Cmd$none,
								_1: {ctor: '[]'}
							});
				}
			case 'MouseDown':
				var _p18 = A3(_user$project$Main$mouseDownEvent, model, _p16._0, _p16._1);
				var modelUpdates = _p18._0;
				var commands = _p18._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: true, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, activeTool: modelUpdates.activeTool}),
					commands);
			case 'MouseUp':
				var _p19 = A3(_user$project$Main$mouseUpEvent, model, _p16._0, _p16._1);
				var modelUpdates = _p19._0;
				var commands = _p19._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: false, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, graphics: modelUpdates.graphics, previewGraphic: modelUpdates.previewGraphic}),
					commands);
			default:
				var _p20 = A2(_user$project$Main$mouseMoveEvent, model, _p16._0);
				var modelUpdates = _p20._0;
				var commands = _p20._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{cursorPosition: modelUpdates.cursorPosition, previewGraphic: modelUpdates.previewGraphic}),
					commands);
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (height) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (width) {
					return _elm_lang$core$Json_Decode$succeed(
						{height: height, width: width});
				},
				A2(_elm_lang$core$Json_Decode$field, 'width', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$int)));

var _user$project$Main$onMouseUpIsolated = function (tagger) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mouseup',
		{stopPropagation: true, preventDefault: true},
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$mouse$Mouse$position));
};
var _user$project$Main$onMouseDownIsolated = function (tagger) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mousedown',
		{stopPropagation: true, preventDefault: true},
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$mouse$Mouse$position));
};
var _user$project$Main$symbols = {
	ctor: '::',
	_0: A2(
		_elm_lang$svg$Svg$symbol,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$id('drawRectangle'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$preserveAspectRatio('none'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$use,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#buttonBackground'),
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#drawRectangleIcon'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		}),
	_1: {
		ctor: '::',
		_0: A2(
			_elm_lang$svg$Svg$symbol,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$id('drawElipse'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$preserveAspectRatio('none'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$use,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#buttonBackground'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$use,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#drawElipseIcon'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$symbol,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$id('buttonBackground'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$preserveAspectRatio('none'),
							_1: {ctor: '[]'}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#ddeaff'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x('0'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y('0'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('100'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('100'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$symbol,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$id('drawRectangleIcon'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$preserveAspectRatio('xMidYMid'),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$rect,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#1e1e1e'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x('20'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y('20'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$width('60'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$height('60'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$symbol,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$id('drawElipseIcon'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$preserveAspectRatio('xMidYMid'),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$ellipse,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('#1e1e1e'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$cx('50'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cy('50'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$rx('30'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$ry('30'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	}
};
var _user$project$Main$trackPosition = F2(
	function (cursor, tagger) {
		var _p0 = cursor;
		if (_p0.ctor === 'NotTracking') {
			return _elm_lang$core$Platform_Sub$none;
		} else {
			return _elm_lang$mouse$Mouse$moves(tagger);
		}
	});
var _user$project$Main$createElipse = F3(
	function (startPosition, currentPosition, model) {
		var commonAttributes = {stroke: 'none', fill: '#666', strokeWidth: '0'};
		var yRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.y - currentPosition.y)));
		var xRadius = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x / y;
				}),
			2,
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(startPosition.x - currentPosition.x)));
		var elipseAttributes = {
			rx: xRadius,
			ry: yRadius,
			cx: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.x, currentPosition.x)) - xRadius,
			cy: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$max, startPosition.y, currentPosition.y)) - yRadius
		};
		return (_elm_lang$core$Native_Utils.eq(elipseAttributes.rx, 0) || _elm_lang$core$Native_Utils.eq(elipseAttributes.ry, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createElipse, elipseAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$createRectangle = F3(
	function (start, end, model) {
		var commonAttributes = {stroke: 'none', fill: '#666', strokeWidth: '0'};
		var recAttributes = {
			x: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.x, end.x)),
			y: _elm_lang$core$Basics$toFloat(
				A2(_elm_lang$core$Basics$min, start.y, end.y)),
			width: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.x - end.x)),
			height: _elm_lang$core$Basics$toFloat(
				_elm_lang$core$Basics$abs(start.y - end.y)),
			rx: 0,
			ry: 0
		};
		return (_elm_lang$core$Native_Utils.eq(recAttributes.height, 0) || _elm_lang$core$Native_Utils.eq(recAttributes.width, 0)) ? {ctor: '[]'} : {
			ctor: '::',
			_0: A2(_user$project$Graphic$createRectangle, recAttributes, commonAttributes),
			_1: {ctor: '[]'}
		};
	});
var _user$project$Main$updatePreviewGraphic = F3(
	function (drawAction, currentPosition, model) {
		var _p1 = drawAction;
		if (_p1.ctor === 'DrawRect') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					previewGraphic: _elm_lang$core$List$head(
						A3(_user$project$Main$createRectangle, _p1._0, currentPosition, model))
				});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					previewGraphic: _elm_lang$core$List$head(
						A3(_user$project$Main$createElipse, _p1._0, currentPosition, model))
				});
		}
	});
var _user$project$Main$setWindowSize = F2(
	function (model, size) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{windowSize: size});
	});
var _user$project$Main$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {windowSize: a, cursorPosition: b, mouseDown: c, currentAction: d, activeTool: e, graphics: f, previewGraphic: g};
	});
var _user$project$Main$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Main$System = function (a) {
	return {ctor: 'System', _0: a};
};
var _user$project$Main$MouseMove = function (a) {
	return {ctor: 'MouseMove', _0: a};
};
var _user$project$Main$MouseUp = F2(
	function (a, b) {
		return {ctor: 'MouseUp', _0: a, _1: b};
	});
var _user$project$Main$MouseDown = F2(
	function (a, b) {
		return {ctor: 'MouseDown', _0: a, _1: b};
	});
var _user$project$Main$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Main$Pos = function (a) {
	return {ctor: 'Pos', _0: a};
};
var _user$project$Main$NotTracking = {ctor: 'NotTracking'};
var _user$project$Main$mouseMoveEvent = F2(
	function (model, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{
				cursorPosition: _elm_lang$core$Native_Utils.eq(model.cursorPosition, _user$project$Main$NotTracking) ? _user$project$Main$NotTracking : _user$project$Main$Pos(position)
			});
		var _p2 = model2.currentAction;
		if (_p2.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: model2,
				_1: {ctor: '[]'}
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A3(_user$project$Main$updatePreviewGraphic, _p2._0, position, model2),
				_1: {ctor: '[]'}
			};
		}
	});
var _user$project$Main$ToolPallet = function (a) {
	return {ctor: 'ToolPallet', _0: a};
};
var _user$project$Main$toolPallet = F5(
	function (x, y, width, height, activeTool) {
		var buttonList = {
			ctor: '::',
			_0: _user$project$Tool$DrawRectangle,
			_1: {
				ctor: '::',
				_0: _user$project$Tool$DrawElipse,
				_1: {ctor: '[]'}
			}
		};
		var selectionColor = '#ff5e5e';
		var selectionBoxThickness = 7;
		var numberOfButtons = 2;
		var borderSize = 5;
		var heightPerButton = (_elm_lang$core$Basics$toFloat(height - borderSize) / numberOfButtons) - borderSize;
		var yPosition = function (elementNumber) {
			return ((elementNumber * (heightPerButton + borderSize)) + _elm_lang$core$Basics$toFloat(y)) + borderSize;
		};
		var xWidth = width - (borderSize * 2);
		var rectangleButton = function (index) {
			return A2(
				_elm_lang$svg$Svg$use,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#drawRectangle'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(x + borderSize)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									yPosition(index))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(xWidth)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString(heightPerButton)),
									_1: {
										ctor: '::',
										_0: _user$project$Main$onMouseUpIsolated(
											function (_p3) {
												return _user$project$Main$System(
													A2(
														_user$project$Main$MouseUp,
														_user$project$Main$ToolPallet(_user$project$Tool$DrawRectangle),
														_p3));
											}),
										_1: {
											ctor: '::',
											_0: _user$project$Main$onMouseDownIsolated(
												function (_p4) {
													return _user$project$Main$System(
														A2(
															_user$project$Main$MouseDown,
															_user$project$Main$ToolPallet(_user$project$Tool$DrawRectangle),
															_p4));
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		};
		var elipseButton = function (index) {
			return A2(
				_elm_lang$svg$Svg$use,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$xlinkHref('#drawElipse'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(x + borderSize)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									yPosition(index))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(xWidth)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString(heightPerButton)),
									_1: {
										ctor: '::',
										_0: _user$project$Main$onMouseUpIsolated(
											function (_p5) {
												return _user$project$Main$System(
													A2(
														_user$project$Main$MouseUp,
														_user$project$Main$ToolPallet(_user$project$Tool$DrawElipse),
														_p5));
											}),
										_1: {
											ctor: '::',
											_0: _user$project$Main$onMouseDownIsolated(
												function (_p6) {
													return _user$project$Main$System(
														A2(
															_user$project$Main$MouseDown,
															_user$project$Main$ToolPallet(_user$project$Tool$DrawElipse),
															_p6));
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		};
		var getToolFunction = function (tool) {
			var _p7 = tool;
			switch (_p7.ctor) {
				case 'Select':
					return _elm_lang$core$Native_Utils.crashCase(
						'Main',
						{
							start: {line: 471, column: 13},
							end: {line: 482, column: 71}
						},
						_p7)('TODO implement select button');
				case 'DrawRectangle':
					return rectangleButton;
				case 'DrawElipse':
					return elipseButton;
				default:
					return _elm_lang$core$Native_Utils.crashCase(
						'Main',
						{
							start: {line: 471, column: 13},
							end: {line: 482, column: 71}
						},
						_p7)('TODO implement draggable tool pallet');
			}
		};
		var selectionBox = function (index) {
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(x + borderSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(
										yPosition(index))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(
										_elm_lang$core$Basics$toString(xWidth)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(selectionBoxThickness)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill(selectionColor),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$rect,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$x(
									_elm_lang$core$Basics$toString(x + borderSize)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$y(
										_elm_lang$core$Basics$toString(
											(yPosition(index) + heightPerButton) - selectionBoxThickness)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width(
											_elm_lang$core$Basics$toString(xWidth)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height(
												_elm_lang$core$Basics$toString(selectionBoxThickness)),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill(selectionColor),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$rect,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(
										_elm_lang$core$Basics$toString(x + borderSize)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString(
												yPosition(index))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width(
												_elm_lang$core$Basics$toString(selectionBoxThickness)),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height(
													_elm_lang$core$Basics$toString(heightPerButton)),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill(selectionColor),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$rect,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$x(
											_elm_lang$core$Basics$toString(((x + borderSize) + xWidth) - selectionBoxThickness)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$y(
												_elm_lang$core$Basics$toString(
													yPosition(index))),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$width(
													_elm_lang$core$Basics$toString(selectionBoxThickness)),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$height(
														_elm_lang$core$Basics$toString(heightPerButton)),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$fill(selectionColor),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}
					}
				});
		};
		var positionButtons = F2(
			function (buttonList, index) {
				var _p10 = buttonList;
				if (_p10.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p12 = _p10._1;
					var _p11 = _p10._0;
					var f = getToolFunction(_p11);
					return _elm_lang$core$Native_Utils.eq(_p11, activeTool) ? {
						ctor: '::',
						_0: f(index),
						_1: {
							ctor: '::',
							_0: selectionBox(index),
							_1: A2(positionButtons, _p12, index + 1)
						}
					} : {
						ctor: '::',
						_0: f(index),
						_1: A2(positionButtons, _p12, index + 1)
					};
				}
			});
		var positionedButtons = A2(positionButtons, buttonList, 0);
		return A2(
			_elm_lang$svg$Svg$g,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(
										_elm_lang$core$Basics$toString(width)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(height)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0254d8'),
											_1: {
												ctor: '::',
												_0: _user$project$Main$onMouseUpIsolated(
													function (_p13) {
														return _user$project$Main$System(
															A2(
																_user$project$Main$MouseUp,
																_user$project$Main$ToolPallet(_user$project$Tool$ToolPalletHandle),
																_p13));
													}),
												_1: {
													ctor: '::',
													_0: _user$project$Main$onMouseDownIsolated(
														function (_p14) {
															return _user$project$Main$System(
																A2(
																	_user$project$Main$MouseDown,
																	_user$project$Main$ToolPallet(_user$project$Tool$ToolPalletHandle),
																	_p14));
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				},
				positionedButtons));
	});
var _user$project$Main$Screen = {ctor: 'Screen'};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(
				function (_p15) {
					return _user$project$Main$System(
						_user$project$Main$Resize(_p15));
				}),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$downs(
					function (_p16) {
						return _user$project$Main$System(
							A2(_user$project$Main$MouseDown, _user$project$Main$Screen, _p16));
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$mouse$Mouse$ups(
						function (_p17) {
							return _user$project$Main$System(
								A2(_user$project$Main$MouseUp, _user$project$Main$Screen, _p17));
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Main$trackPosition,
							model.cursorPosition,
							function (_p18) {
								return _user$project$Main$System(
									_user$project$Main$MouseMove(_p18));
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$Graphic = function (a) {
	return {ctor: 'Graphic', _0: a};
};
var _user$project$Main$view = function (model) {
	var wWidth = model.windowSize.width;
	var wHeight = model.windowSize.height;
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width(
				_elm_lang$core$Basics$toString(wWidth)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height(
					_elm_lang$core$Basics$toString(wHeight)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'0 0 ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(wWidth),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(wHeight))))),
					_1: {
						ctor: '::',
						_0: _user$project$Main$onMouseUpIsolated(
							function (_p19) {
								return _user$project$Main$System(
									A2(_user$project$Main$MouseUp, _user$project$Main$Screen, _p19));
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$onMouseDownIsolated(
								function (_p20) {
									return _user$project$Main$System(
										A2(_user$project$Main$MouseDown, _user$project$Main$Screen, _p20));
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$Main$symbols,
			A3(
				_elm_lang$core$Basics$flip,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A5(_user$project$Main$toolPallet, 50, 50, 80, 160, model.activeTool),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					function (graphic) {
						return A2(
							_user$project$Graphic$toSvg,
							{
								ctor: '::',
								_0: _user$project$Main$onMouseUpIsolated(
									function (_p21) {
										return _user$project$Main$System(
											_user$project$Main$MouseUp(
												_user$project$Main$Graphic(graphic))(_p21));
									}),
								_1: {
									ctor: '::',
									_0: _user$project$Main$onMouseDownIsolated(
										function (_p22) {
											return _user$project$Main$System(
												_user$project$Main$MouseDown(
													_user$project$Main$Graphic(graphic))(_p22));
										}),
									_1: {ctor: '[]'}
								}
							},
							graphic);
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						model.graphics,
						_user$project$Utilities$maybeToList(model.previewGraphic))))));
};
var _user$project$Main$Draw = function (a) {
	return {ctor: 'Draw', _0: a};
};
var _user$project$Main$None = {ctor: 'None'};
var _user$project$Main$initialModel = {
	windowSize: {width: 0, height: 0},
	cursorPosition: _user$project$Main$NotTracking,
	mouseDown: false,
	currentAction: _user$project$Main$None,
	activeTool: _user$project$Tool$DrawRectangle,
	graphics: {ctor: '[]'},
	previewGraphic: _elm_lang$core$Maybe$Nothing
};
var _user$project$Main$init = function (size) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		A2(_user$project$Main$setWindowSize, _user$project$Main$initialModel, size),
		{ctor: '[]'});
};
var _user$project$Main$mouseUpEvent = F3(
	function (model, clickTarget, position) {
		var _p23 = model.currentAction;
		if (_p23.ctor === 'None') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{cursorPosition: _user$project$Main$NotTracking}),
				_1: {ctor: '[]'}
			};
		} else {
			var _p24 = _p23._0;
			if (_p24.ctor === 'DrawRect') {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentAction: _user$project$Main$None,
							cursorPosition: _user$project$Main$NotTracking,
							graphics: A2(
								_elm_lang$core$Basics_ops['++'],
								model.graphics,
								_user$project$Utilities$maybeToList(model.previewGraphic)),
							previewGraphic: _elm_lang$core$Maybe$Nothing
						}),
					_1: {ctor: '[]'}
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentAction: _user$project$Main$None,
							cursorPosition: _user$project$Main$NotTracking,
							graphics: A2(
								_elm_lang$core$Basics_ops['++'],
								model.graphics,
								_user$project$Utilities$maybeToList(model.previewGraphic)),
							previewGraphic: _elm_lang$core$Maybe$Nothing
						}),
					_1: {ctor: '[]'}
				};
			}
		}
	});
var _user$project$Main$DrawElipse = function (a) {
	return {ctor: 'DrawElipse', _0: a};
};
var _user$project$Main$DrawRect = function (a) {
	return {ctor: 'DrawRect', _0: a};
};
var _user$project$Main$mouseDownEvent = F3(
	function (model, clickTarget, position) {
		var model2 = _elm_lang$core$Native_Utils.update(
			model,
			{mouseDown: true});
		var _p25 = A2(_elm_lang$core$Debug$log, 'mouseDown click target', clickTarget);
		if (_p25.ctor === 'ToolPallet') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model2,
					{currentAction: _user$project$Main$None, activeTool: _p25._0, cursorPosition: _user$project$Main$NotTracking}),
				_1: {ctor: '[]'}
			};
		} else {
			var _p26 = model.activeTool;
			switch (_p26.ctor) {
				case 'Select':
					var _p27 = clickTarget;
					switch (_p27.ctor) {
						case 'Screen':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model2,
									{cursorPosition: _user$project$Main$NotTracking, currentAction: _user$project$Main$None}),
								_1: {ctor: '[]'}
							};
						case 'Graphic':
							return _elm_lang$core$Native_Utils.crashCase(
								'Main',
								{
									start: {line: 175, column: 25},
									end: {line: 188, column: 88}
								},
								_p27)('TODO - Selected a Graphic for editing');
						default:
							return A2(
								_elm_lang$core$Debug$log,
								'Evaluated unreachable branch',
								{
									ctor: '_Tuple2',
									_0: model2,
									_1: {ctor: '[]'}
								});
					}
				case 'DrawRectangle':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model2,
							{
								cursorPosition: _user$project$Main$Pos(position),
								currentAction: _user$project$Main$Draw(
									_user$project$Main$DrawRect(position))
							}),
						_1: {ctor: '[]'}
					};
				case 'DrawElipse':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model2,
							{
								cursorPosition: _user$project$Main$Pos(position),
								currentAction: _user$project$Main$Draw(
									_user$project$Main$DrawElipse(position))
							}),
						_1: {ctor: '[]'}
					};
				default:
					return _elm_lang$core$Native_Utils.crashCase(
						'Main',
						{
							start: {line: 173, column: 17},
							end: {line: 207, column: 64}
						},
						_p26)('TODO - Moving Tool Pallet');
			}
		}
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p30 = msg;
		var _p31 = _p30._0;
		switch (_p31.ctor) {
			case 'Resize':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{windowSize: _p31._0}),
					{ctor: '[]'});
			case 'MouseDown':
				var _p32 = A3(_user$project$Main$mouseDownEvent, model, _p31._0, _p31._1);
				var modelUpdates = _p32._0;
				var commands = _p32._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: true, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, activeTool: modelUpdates.activeTool}),
					commands);
			case 'MouseUp':
				var _p33 = A3(_user$project$Main$mouseUpEvent, model, _p31._0, _p31._1);
				var modelUpdates = _p33._0;
				var commands = _p33._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{mouseDown: false, cursorPosition: modelUpdates.cursorPosition, currentAction: modelUpdates.currentAction, graphics: modelUpdates.graphics}),
					commands);
			default:
				var _p34 = A2(_user$project$Main$mouseMoveEvent, model, _p31._0);
				var modelUpdates = _p34._0;
				var commands = _p34._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{cursorPosition: modelUpdates.cursorPosition, previewGraphic: modelUpdates.previewGraphic}),
					commands);
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (height) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (width) {
					return _elm_lang$core$Json_Decode$succeed(
						{height: height, width: width});
				},
				A2(_elm_lang$core$Json_Decode$field, 'width', _elm_lang$core$Json_Decode$int));
		},
		A2(_elm_lang$core$Json_Decode$field, 'height', _elm_lang$core$Json_Decode$int)));

var _user$project$Properties_Render$Fill = {ctor: 'Fill'};
var _user$project$Properties_Render$Stroke = {ctor: 'Stroke'};
var _user$project$Properties_Render$propertiesPallet = F5(
	function (x, y, height, palletState, currentAction) {
		var labelFontColor = '#000000';
		var labelFontSize = 18;
		var borderSize = 5;
		var widgetX = _elm_lang$core$Basics$toFloat(x + borderSize);
		var widgetList = {
			ctor: '::',
			_0: _user$project$Properties$StrokeColor(_user$project$Properties$ColorBox),
			_1: {
				ctor: '::',
				_0: _user$project$Properties$FillColor(_user$project$Properties$ColorBox),
				_1: {
					ctor: '::',
					_0: _user$project$Properties$StrokeWidth(_user$project$Properties$Increment),
					_1: {ctor: '[]'}
				}
			}
		};
		var widgetHeight = A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return x - y;
				}),
			borderSize,
			A2(
				F2(
					function (x, y) {
						return x / y;
					}),
				height - borderSize,
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$List$length(widgetList))));
		var widgetWidth = widgetHeight * 1.5;
		var width = widgetWidth + (borderSize * 2);
		var yPosFromIndex = function (index) {
			return ((_elm_lang$core$Basics$toFloat(index) * (widgetHeight + borderSize)) + _elm_lang$core$Basics$toFloat(y)) + borderSize;
		};
		var label = F2(
			function (labelText, index) {
				return A2(
					_elm_lang$svg$Svg$text_,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(widgetX + (widgetWidth / 2))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									yPosFromIndex(index) + labelFontSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fontSize(
									_elm_lang$core$Basics$toString(labelFontSize)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$textAnchor('middle'),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg$text(labelText),
						_1: {ctor: '[]'}
					});
			});
		var decrementButton = function (index) {
			return A2(
				_elm_lang$svg$Svg$svg,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(widgetX + (widgetWidth * 5.0e-2))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									(yPosFromIndex(index) + labelFontSize) + borderSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(widgetWidth * 0.3)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString((widgetHeight - labelFontSize) - (borderSize * 2))),
									_1: {
										ctor: '::',
										_0: _user$project$Events$mouseDownWithClickTarget(
											_user$project$Messages_ClickTarget$PropertiesPallet(
												_user$project$Properties$StrokeWidth(_user$project$Properties$Decrement))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$polygon,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$points('0 50, 100 0, 100 100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('gold'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		};
		var incrementButton = function (index) {
			return A2(
				_elm_lang$svg$Svg$svg,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(widgetX + (widgetWidth * 0.6))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									(yPosFromIndex(index) + labelFontSize) + borderSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(widgetWidth * 0.3)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString((widgetHeight - labelFontSize) - (borderSize * 2))),
									_1: {
										ctor: '::',
										_0: _user$project$Events$mouseDownWithClickTarget(
											_user$project$Messages_ClickTarget$PropertiesPallet(
												_user$project$Properties$StrokeWidth(_user$project$Properties$Increment))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$polygon,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$points('0 0, 100 50, 0 100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill('gold'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
		};
		var strokeWidthNumber = function (index) {
			return A2(
				_elm_lang$svg$Svg$text_,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(widgetX + (widgetWidth / 2))),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(
								yPosFromIndex(index) + ((widgetHeight - borderSize) * 0.92))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fontSize(
								_elm_lang$core$Basics$toString(labelFontSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$textAnchor('middle'),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg$text(
						_elm_lang$core$Basics$toString(palletState.strokeWidth)),
					_1: {ctor: '[]'}
				});
		};
		var numberControls = function (index) {
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: decrementButton(index),
					_1: {
						ctor: '::',
						_0: strokeWidthNumber(index),
						_1: {
							ctor: '::',
							_0: incrementButton(index),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var colorBox = F3(
			function (index, color, widget) {
				return A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(widgetX + (widgetWidth * 0.1))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width(
								_elm_lang$core$Basics$toString(widgetWidth * 0.8)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(
										(yPosFromIndex(index) + labelFontSize) + borderSize)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString((widgetHeight - labelFontSize) - (borderSize * 2))),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill(
											_eskimoblood$elm_color_extra$Color_Convert$colorToHex(color)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$stroke('#000000'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
													_elm_lang$core$Basics$toString(borderSize / 2)),
												_1: {
													ctor: '::',
													_0: _user$project$Events$mouseDownWithClickTarget(
														_user$project$Messages_ClickTarget$PropertiesPallet(widget)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'});
			});
		var widgetBackgroundBox = function (index) {
			return A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill('#ffffff'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$stroke('none'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(widgetX)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(
										yPosFromIndex(index))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(
										_elm_lang$core$Basics$toString(widgetWidth)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(widgetHeight)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		};
		var strokeColorWidget = function (index) {
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: widgetBackgroundBox(index),
					_1: {
						ctor: '::',
						_0: A2(label, 'Stroke', index),
						_1: {
							ctor: '::',
							_0: A3(
								colorBox,
								index,
								palletState.strokeColor,
								_user$project$Properties$StrokeColor(_user$project$Properties$ColorBox)),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var fillColorWidget = function (index) {
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: widgetBackgroundBox(index),
					_1: {
						ctor: '::',
						_0: A2(label, 'Fill', index),
						_1: {
							ctor: '::',
							_0: A3(
								colorBox,
								index,
								palletState.fillColor,
								_user$project$Properties$FillColor(_user$project$Properties$ColorBox)),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var strokeWidthWidget = function (index) {
			return A2(
				_elm_lang$svg$Svg$g,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: widgetBackgroundBox(index),
					_1: {
						ctor: '::',
						_0: A2(label, 'Line Size', index),
						_1: {
							ctor: '::',
							_0: numberControls(index),
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var getWidgetFunction = function (widget) {
			var _p0 = widget;
			switch (_p0.ctor) {
				case 'FillColor':
					return fillColorWidget;
				case 'StrokeColor':
					return strokeColorWidget;
				default:
					return strokeWidthWidget;
			}
		};
		var positionWidgets = F2(
			function (widgetList, index) {
				var _p1 = widgetList;
				if (_p1.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					return {
						ctor: '::',
						_0: A2(getWidgetFunction, _p1._0, index),
						_1: A2(positionWidgets, _p1._1, index + 1)
					};
				}
			});
		var colorPicker = F3(
			function (index, color, target) {
				var events = function () {
					var _p2 = target;
					if (_p2.ctor === 'Fill') {
						return {
							mouseUp: function (pickerWidget) {
								return _user$project$Events$mouseUpWithClickTarget(
									_user$project$Messages_ClickTarget$PropertiesPallet(
										_user$project$Properties$FillColor(pickerWidget)));
							},
							mouseDown: function (pickerWidget) {
								return _user$project$Events$mouseDownWithClickTarget(
									_user$project$Messages_ClickTarget$PropertiesPallet(
										_user$project$Properties$FillColor(pickerWidget)));
							}
						};
					} else {
						return {
							mouseUp: function (pickerWidget) {
								return _user$project$Events$mouseUpWithClickTarget(
									_user$project$Messages_ClickTarget$PropertiesPallet(
										_user$project$Properties$StrokeColor(pickerWidget)));
							},
							mouseDown: function (pickerWidget) {
								return _user$project$Events$mouseDownWithClickTarget(
									_user$project$Messages_ClickTarget$PropertiesPallet(
										_user$project$Properties$StrokeColor(pickerWidget)));
							}
						};
					}
				}();
				var _p3 = function () {
					var hsl = _elm_lang$core$Color$toHsl(color);
					var hueFloat = A2(_user$project$Utilities$replaceNaNWith, 0, hsl.hue);
					var saturationFloat = A2(_user$project$Utilities$replaceNaNWith, 1, hsl.saturation);
					var lightnessFloat = A2(_user$project$Utilities$replaceNaNWith, 1, hsl.lightness);
					return {
						ctor: '_Tuple4',
						_0: A3(_elm_lang$core$Color$hsl, hueFloat, 1, 0.5),
						_1: hueFloat,
						_2: saturationFloat,
						_3: lightnessFloat
					};
				}();
				var hue = _p3._0;
				var hueFloat = _p3._1;
				var saturationFloat = _p3._2;
				var lightnessFloat = _p3._3;
				var padding = 10;
				var arrowWidth = 40;
				var pickerHeightRatio = 1.2;
				var pickerRectWidth = 180;
				var pickerWidth = pickerRectWidth + arrowWidth;
				var pickerHeight = pickerRectWidth * pickerHeightRatio;
				var pickerOrigin = {
					x: widgetX - pickerWidth,
					y: (((yPosFromIndex(index) + labelFontSize) + borderSize) + (((widgetHeight - labelFontSize) - (borderSize * 2)) / 2)) - (pickerHeight / 2)
				};
				var saturationBoxOrigin = {x: pickerOrigin.x + padding, y: pickerOrigin.y + padding};
				var saturationBoxSize = pickerRectWidth - (padding * 2);
				var saturationBoxDimensions = {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(padding)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(padding)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width(
								_elm_lang$core$Basics$toString(saturationBoxSize)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height(
									_elm_lang$core$Basics$toString(saturationBoxSize)),
								_1: {ctor: '[]'}
							}
						}
					}
				};
				var hueBoxHeight = (pickerHeight - saturationBoxSize) - (padding * 3);
				var hueBoxDimensions = {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(padding)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(saturationBoxSize + (padding * 2))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$height(
								_elm_lang$core$Basics$toString(hueBoxHeight)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(saturationBoxSize)),
								_1: {ctor: '[]'}
							}
						}
					}
				};
				var hueBoxOrigin = {x: pickerOrigin.x + padding, y: (pickerOrigin.y + saturationBoxSize) + (padding * 2)};
				var selectSatLight = function (pos) {
					var relativeY = _elm_lang$core$Basics$toFloat(pos.y) - saturationBoxOrigin.y;
					var relativeX = _elm_lang$core$Basics$toFloat(pos.x) - saturationBoxOrigin.x;
					return A3(_elm_lang$core$Color$hsl, hueFloat, relativeY / saturationBoxSize, (saturationBoxSize - relativeX) / saturationBoxSize);
				};
				var selectHue = function (pos) {
					var offset = 0;
					var relativeX = _elm_lang$core$Basics$toFloat(pos.x) - hueBoxOrigin.x;
					var xPercentage = relativeX / saturationBoxSize;
					return A3(
						_elm_lang$core$Color$hsl,
						_elm_lang$core$Basics$degrees(xPercentage * 360),
						saturationFloat,
						lightnessFloat);
				};
				return A2(
					_elm_lang$svg$Svg$svg,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(pickerOrigin.x)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(pickerOrigin.y)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(pickerWidth)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString(pickerHeight)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$viewBox(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'0 0 ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(pickerWidth),
													A2(
														_elm_lang$core$Basics_ops['++'],
														' ',
														_elm_lang$core$Basics$toString(pickerHeight))))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$defs,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$linearGradient,
									{
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$id('saturation'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$x1('0'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$y1('1'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$x2('0'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$y2('0'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$stop,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$offset('0'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$stopColor('#808080'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stopOpacity('0'),
														_1: {ctor: '[]'}
													}
												}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$stop,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$offset('1'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stopColor('#808080'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stopOpacity('1'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$linearGradient,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$id('lightness'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$stop,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$offset('0'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$stopColor('#fff'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stopOpacity('1'),
															_1: {ctor: '[]'}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$stop,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$offset('0.499'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stopColor('#fff'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stopOpacity('0'),
																_1: {ctor: '[]'}
															}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$stop,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$offset('0.5'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stopColor('#000'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stopOpacity('0'),
																	_1: {ctor: '[]'}
																}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$stop,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$offset('1'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stopColor('#000'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$stopOpacity('1'),
																		_1: {ctor: '[]'}
																	}
																}
															},
															{ctor: '[]'}),
														_1: {ctor: '[]'}
													}
												}
											}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$linearGradient,
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$id('hue'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$stop,
													{
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$offset('0'),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$stopColor('#FF0000'),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$stop,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$offset('0.17'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$stopColor('#FFFF00'),
																_1: {ctor: '[]'}
															}
														},
														{ctor: '[]'}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$svg$Svg$stop,
															{
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$offset('0.33'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stopColor('#00FF00'),
																	_1: {ctor: '[]'}
																}
															},
															{ctor: '[]'}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$svg$Svg$stop,
																{
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$offset('0.5'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$stopColor('#00FFFF'),
																		_1: {ctor: '[]'}
																	}
																},
																{ctor: '[]'}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$svg$Svg$stop,
																	{
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$offset('0.66'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$stopColor('#0000FF'),
																			_1: {ctor: '[]'}
																		}
																	},
																	{ctor: '[]'}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$svg$Svg$stop,
																		{
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$offset('0.83'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$stopColor('#FF00FF'),
																				_1: {ctor: '[]'}
																			}
																		},
																		{ctor: '[]'}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$svg$Svg$stop,
																			{
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$offset('1'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$stopColor('#FF0000'),
																					_1: {ctor: '[]'}
																				}
																			},
																			{ctor: '[]'}),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$polygon,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#ededed'),
									_1: {
										ctor: '::',
										_0: events.mouseUp(_user$project$Properties$Background),
										_1: {
											ctor: '::',
											_0: events.mouseDown(_user$project$Properties$Background),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$points(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'0 0, ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(pickerRectWidth),
																' 0, '),
															A2(
																_elm_lang$core$Basics_ops['++'],
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(pickerWidth),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		' ',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(pickerHeight / 2),
																			', '))),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(pickerRectWidth),
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			' ',
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				_elm_lang$core$Basics$toString(pickerHeight),
																				', '))),
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		'0 ',
																		_elm_lang$core$Basics$toString(pickerHeight))))))),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$svg$Svg$rect,
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill(
												_eskimoblood$elm_color_extra$Color_Convert$colorToHex(hue)),
											_1: {ctor: '[]'}
										},
										saturationBoxDimensions),
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$rect,
										A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$fill('url(#saturation)'),
												_1: {ctor: '[]'}
											},
											saturationBoxDimensions),
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$svg$Svg$rect,
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('url(#lightness)'),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$style('cursor: crosshair'),
														_1: {
															ctor: '::',
															_0: events.mouseUp(
																_user$project$Properties$SaturationLightness(selectSatLight)),
															_1: {
																ctor: '::',
																_0: events.mouseDown(
																	_user$project$Properties$SaturationLightness(selectSatLight)),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												saturationBoxDimensions),
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$svg$Svg$circle,
												{
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$cx(
														_elm_lang$core$Basics$toString(padding + ((1 - lightnessFloat) * saturationBoxSize))),
													_1: {
														ctor: '::',
														_0: _elm_lang$svg$Svg_Attributes$cy(
															_elm_lang$core$Basics$toString(padding + (saturationFloat * saturationBoxSize))),
														_1: {
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$r('3'),
															_1: {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$stroke('#808080'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$strokeWidth('3'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$svg$Svg$rect,
													A2(
														_elm_lang$core$Basics_ops['++'],
														hueBoxDimensions,
														{
															ctor: '::',
															_0: _elm_lang$svg$Svg_Attributes$fill('url(#hue)'),
															_1: {
																ctor: '::',
																_0: events.mouseUp(
																	_user$project$Properties$Hue(selectHue)),
																_1: {
																	ctor: '::',
																	_0: events.mouseDown(
																		_user$project$Properties$Hue(selectHue)),
																	_1: {ctor: '[]'}
																}
															}
														}),
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$svg$Svg$rect,
														function () {
															var thickness = 4;
															return {
																ctor: '::',
																_0: _elm_lang$svg$Svg_Attributes$x(
																	_elm_lang$core$Basics$toString(padding + ((hueFloat / (2 * _elm_lang$core$Basics$pi)) * saturationBoxSize))),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$svg$Svg_Attributes$y(
																		_elm_lang$core$Basics$toString((saturationBoxSize - (thickness / 2)) + (padding * 2))),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$svg$Svg_Attributes$width('10'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$svg$Svg_Attributes$height(
																				_elm_lang$core$Basics$toString(hueBoxHeight + thickness)),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$svg$Svg_Attributes$fill('none'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$svg$Svg_Attributes$stroke('#808080'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$svg$Svg_Attributes$strokeWidth(
																							_elm_lang$core$Basics$toString(thickness)),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																}
															};
														}(),
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					});
			});
		var positionedWidgets = A2(positionWidgets, widgetList, 0);
		var positionedColorPicker = function () {
			var _p4 = currentAction;
			switch (_p4.ctor) {
				case 'SelectFillColor':
					return A3(
						colorPicker,
						_elm_lang$core$Basics$abs(
							A2(
								_user$project$Utilities$indexOf,
								_user$project$Properties$FillColor(_user$project$Properties$ColorBox),
								widgetList)),
						palletState.fillColor,
						_user$project$Properties_Render$Fill);
				case 'SelectStrokeColor':
					return A3(
						colorPicker,
						_elm_lang$core$Basics$abs(
							A2(
								_user$project$Utilities$indexOf,
								_user$project$Properties$StrokeColor(_user$project$Properties$ColorBox),
								widgetList)),
						palletState.strokeColor,
						_user$project$Properties_Render$Stroke);
				default:
					return A2(
						_elm_lang$svg$Svg$g,
						{ctor: '[]'},
						{ctor: '[]'});
			}
		}();
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _user$project$Events$mouseUpWithClickTarget(
					_user$project$Messages_ClickTarget$PalletHandle(_user$project$Pallet$PropertiesPallet)),
				_1: {
					ctor: '::',
					_0: _user$project$Events$mouseDownWithClickTarget(
						_user$project$Messages_ClickTarget$PalletHandle(_user$project$Pallet$PropertiesPallet)),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$rect,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(x)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width(
										_elm_lang$core$Basics$toString(width)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height(
											_elm_lang$core$Basics$toString(height)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$fill('#0254d8'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				},
				{ctor: '::', _0: positionedColorPicker, _1: positionedWidgets}));
	});
